# Generated by Django 5.1.1 on 2024-10-24 15:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('guest_id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.CharField(max_length=100)),
                ('created_at', models.DateField(auto_now_add=True)),
            ],
            options={
                'db_table': 'guest',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OpportunityCategory',
            fields=[
                ('opp_category_id', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'opportunity_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OpportunityStatus',
            fields=[
                ('opp_status_id', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'opportunity_status',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserCategory',
            fields=[
                ('user_category_id', models.AutoField(primary_key=True, serialize=False)),
                ('category_label', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'user_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VoteCriteria',
            fields=[
                ('criteria_id', models.AutoField(primary_key=True, serialize=False)),
                ('criteria_label', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('min_score', models.IntegerField(default=1)),
                ('max_score', models.IntegerField()),
            ],
            options={
                'db_table': 'vote_criteria',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Opportunity',
            fields=[
                ('opportunity_id', models.AutoField(primary_key=True, serialize=False)),
                ('opp_name', models.CharField(max_length=100)),
                ('customer_segment', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('opp_category_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.opportunitycategory')),
                ('opp_status_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.opportunitystatus')),
                ('user_category_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.usercategory')),
            ],
            options={
                'db_table': 'opportunity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VotingSession',
            fields=[
                ('vs_id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100)),
                ('url_link', models.CharField(max_length=100)),
                ('start_time', models.DateTimeField(null=True)),
                ('end_time', models.DateTimeField(null=True)),
                ('opportunity_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.opportunity')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'voting_session',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('vote_id', models.AutoField(primary_key=True, serialize=False)),
                ('vote_score', models.IntegerField(default=0)),
                ('user_vote_explanation', models.TextField(blank=True, null=True)),
                ('guest_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.guest')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('items_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.votecriteria')),
                ('vs_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.votingsession')),
            ],
            options={
                'db_table': 'vote',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SessionParticipant',
            fields=[
                ('participant_id', models.AutoField(primary_key=True, serialize=False)),
                ('guest_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.guest')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_category_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.usercategory')),
                ('vs_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wheretoplayApp.votingsession')),
            ],
            options={
                'db_table': 'session_participant',
                'managed': True,
            },
        ),
    ]
